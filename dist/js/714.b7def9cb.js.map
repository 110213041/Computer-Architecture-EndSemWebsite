{"version":3,"file":"js/714.b7def9cb.js","mappings":"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","sources":["webpack://final-site/./src/assets/Java/J_Chapter2.vue","webpack://final-site/./src/assets/Java/J_Chapter2.vue?1b0f","webpack://final-site/./src/components/HeaderTemplate.vue","webpack://final-site/./src/components/HeaderTemplate.vue?e64b"],"sourcesContent":["<template>\r\n    <div class=\"chapter-container\">\r\n        <div class=\"chapter-article\">\r\n            <div class=\"article-container\">\r\n                <!-- <h3>類別與物件的基本概念</h3> -->\r\n                <HeaderTemplate\r\n                    :title=\"allHeaders[0].title\"\r\n                    :headerLevel=\"allHeaders[0].headerLevel\"\r\n                    :headerId=\"0\"\r\n                ></HeaderTemplate>\r\n\r\n                <p>\r\n                    所謂物件,說得白話一點,可稱之為\"東西\"。這是個很抽象的名詞,我們若以它具體的特性來描述,會比較清楚:\r\n                </p>\r\n\r\n                <ul>\r\n                    <li>Object有生命週期,會\"產生\"和\"消滅\"</li>\r\n                    <li>\r\n                        Object具有其內部狀態, 同一類別的不同Object,\r\n                        其的內部狀態可能都不一樣\r\n                    </li>\r\n                    <li>\r\n                        Object可以接收\"訊息\",並依據訊息的參數以及該物件的內部狀態,做出反應,並可能因而改變該物件的內部狀態\r\n                    </li>\r\n                </ul>\r\n\r\n                <p>\r\n                    屬於同一個Class的Object,會具有該Class所定義的以上三種特質。\r\n                </p>\r\n\r\n                <p>\r\n                    除此之外,Class之間可以定義繼承(Inheritance)關係,子類別(Sub\r\n                    Class)繼承父類別(Super\r\n                    Class)的所有特性,子類別還可以定義其專屬的特性。\r\n                </p>\r\n\r\n                <p>\r\n                    以Object-Oriented(物件導向)\r\n                    Language寫作程式時,寫作的主體是Class。Class定義了所有屬於該Class的Object的特性,這些特性可分類如下:\r\n                </p>\r\n\r\n                <ul>\r\n                    <li>\r\n                        Object產生時一定要呼叫的方法,\r\n                        稱為Constructor(建構子)\r\n                    </li>\r\n                    <li>\r\n                        Object消滅需要呼叫的方法, 稱為Destructor(解構子)\r\n                    </li>\r\n                    <li>\r\n                        表達Object內部狀態的變數, 稱為Object\r\n                        Variable(物件變數成員)\r\n                    </li>\r\n                    <li>\r\n                        Object可以接收的訊息, 稱為Object\r\n                        Method(物件方法成員)\r\n                    </li>\r\n                    <li>上述兩個可總稱為Object Member</li>\r\n                    <li>\r\n                        屬於Class的變數, 稱為Class Variable(類別變數)\r\n                    </li>\r\n                    <li>屬於Class的方法, 成為Class Method(類別方法)</li>\r\n                    <li>上述兩個可總稱為Class Member</li>\r\n                    <li>和其他Class間的繼承關係</li>\r\n                </ul>\r\n            </div>\r\n            <div class=\"article-container\">\r\n                <!-- <h3>如何以Java撰寫類別</h3> -->\r\n                <HeaderTemplate\r\n                    :title=\"allHeaders[1].title\"\r\n                    :headerLevel=\"allHeaders[1].headerLevel\"\r\n                    :headerId=\"1\"\r\n                ></HeaderTemplate>\r\n\r\n                <p>\r\n                    Java規定公共類別(public\r\n                    class)必須寫在該公共類別名稱的.java檔案內,\r\n                    例如public class\r\n                    Example就必須寫在Example.java這個檔案內。Example.java裡面也可以定義其他的類別,但是只有class\r\n                    Example能夠宣告為public,其他Example.java裡的class都不能宣告為public。當Java\r\n                    Virtual\r\n                    Machine啟動時,它會去找命令列上所指定的class裡的public\r\n                    static void main(String[]\r\n                    argv)方法,當做是程式的進入點。這有點像是C語言的main,\r\n                    不同處在於每個java class都可以定義自己的public\r\n                    static void main(String[] argv)。\r\n                </p>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    autodetect\r\n                    code=\"java Example\"\r\n                ></highlightjs>\r\n\r\n                <p>\r\n                    啟動上述的JVM時, JVM會去執行class Example裡的public\r\n                    static void main(String[]\r\n                    argv)。以下範例Example.java說明如何定義Java的class。\r\n                </p>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"java\"\r\n                    code='class Vehicle {\r\n    private int speed; // Object Variable\r\n    private String direction; // Object Variable, direction is a reference to String Object\r\n    private static int numVehicle = 0; // Class Variable\r\n    public Vehicle() { // Constructor, called when new a Object\r\n        this(0,\"north\"); // call another constructor to do initialization\r\n    }\r\n    public Vehicle(int s, String dir) { // Another Constructor. Use overloading to define two constructors\r\n        float speed; // define a local variable\r\n        speed = s; // the speed here refers to the above local variable\r\n        this.speed = s; // If we want to set object variable, use this.speed to refer object variable speed\r\n        direction = dir; // dir is a reference to object, not the object itself\r\n        numVehicle++;   // increase the Vehicle number\r\n    }\r\n    protected void finalize() { // Destructor, called when the object is garbage collected by JVM\r\n        System.out.println(\"finalize has been called\");\r\n        numVehicle--;\r\n    }\r\n    void setSpeed(int newSpeed) { // Object Method\r\n        this.speed = newSpeed;\r\n    }\r\n    void setDir(String dir) { // Object Method\r\n        this.direction = dir;\r\n    }\r\n    int getSpeed() { // Object Method\r\n        return speed;\r\n    }\r\n    String getDir() { // Object Method\r\n        return direction;\r\n    }\r\n    public static int totalVehicle() { // Class Method\r\n        return numVehicle;\r\n    }\r\n}\r\npublic class Example {\r\n    public static void main(String[] argv) {\r\n        Vehicle v1 = new Vehicle(50, \"west\"); // new 敘述用來產生物件. 物件產生時需要呼叫Constructor來初始化物件\r\n        Vehicle v2;\r\n        v1.setSpeed(30);\r\n        v1.setDir(\"north\");\r\n        System.out.println(\"V1: speed is \"+v1.getSpeed()+\", direction is \"+v1.getDir()+\".\\n\");\r\n        v2 = new Vehicle(40, \"south\");\r\n        System.out.println(\"There are \"+Vehicle.totalVehicle()+\" Vehicles in the world.\\n\");\r\n        v1 = v2; // let reference v1 point to where v2 is pointing\r\n        System.out.println(\"V1: speed is \"+v1.getSpeed()+\", direction is \"+v1.getDir()+\".\\n\");\r\n        System.gc(); // force system to do garbage collection, the object previously pointed by v1 shall be destroyed\r\n        System.out.println(\"There are \"+Vehicle.totalVehicle()+\" Vehicles in the world.\\n\");\r\n    }\r\n}'\r\n                ></highlightjs>\r\n\r\n                <p>上述例子裡所用到的關鍵字或類別名稱說明如下:</p>\r\n\r\n                <ul>\r\n                    <li>\r\n                        public:可用在\r\n                        <ul>\r\n                            <li>\r\n                                class前面表示此class可以供其他package裡的類別使用。同一個目錄下的class均可視為屬於同一個package。\r\n                            </li>\r\n                            <li>\r\n                                object or class member前面,\r\n                                表示所有的class均可存取此member。\r\n                            </li>\r\n                        </ul>\r\n                    </li>\r\n                    <li>\r\n                        private:可用在object or class member前面,\r\n                        表示只有定義這些member的class才可存取。\r\n                    </li>\r\n                    <li>\r\n                        static:可用在member前面。如果member前面有static,\r\n                        表示該member屬於class,否則屬於object。不論系統創造了多少object,class\r\n                        variable只有一個;而每個object都有其object\r\n                        variable。存取class\r\n                        method的語法是ClassName.classMethod();存取object\r\n                        method時,則必須以reference.objectMethod()來呼叫。在Object\r\n                        Method裡,可用this表示目前的物件。但在Class\r\n                        Method裡就不能存取object member了。\r\n                    </li>\r\n                    <li>this:表示目前這個物件</li>\r\n                    <li>\r\n                        String:定義於java.lang package下面的類別,\r\n                        屬於Java語言定義的標準程式庫。\r\n                    </li>\r\n                    <li>\r\n                        System:定義於java.lang package下面的類別,\r\n                        屬於Java語言定義的標準程式庫。\r\n                    </li>\r\n                    <li>\r\n                        System.out是class System裡面的一個Class\r\n                        Variable, 其型態為reference to 定義於java.io\r\n                        package裡面的PrintStream。我們可透過該變數所指到的物件,\r\n                        將訊息印到螢幕上。\r\n                    </li>\r\n                    <li>\r\n                        System.gc是class System裡面的一個Class Method,\r\n                        呼叫該方法可強迫JVM回收沒有被任何reference指到的物件。當物件被回收時,\r\n                        該物件的finalize方法會被呼叫。\r\n                    </li>\r\n                    <li>\r\n                        new:用來產生新的物件。後面必須跟著某個constructor,\r\n                        以便進行初始化的動作。\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div class=\"article-container\">\r\n                <HeaderTemplate\r\n                    :title=\"allHeaders[2].title\"\r\n                    :headerLevel=\"allHeaders[2].headerLevel\"\r\n                    :headerId=\"2\"\r\n                ></HeaderTemplate>\r\n                <!-- <h3>\r\n                Object Method的名稱如果和Class的名稱相同,\r\n                則表示該Method為Constructor。Constructor不能宣告傳回值。\r\n            </h3> -->\r\n\r\n                <p>\r\n                    要附帶說明的是, Java以new指令來產生物件,\r\n                    但不像C++有提供相對應的delete指令來消滅物件。Java採用Garbage\r\n                    Collection的觀念,當系統於閒置期間自動呼叫或由使用者強制呼叫System.gc()時,沒有被任何reference指到的Object就會被回收。\r\n                </p>\r\n\r\n                <p>\r\n                    Class裡面一定要定義一個以上的Constructor,\r\n                    但為了方便起見,如果Compiler發現某Class沒有定義Constructor,則Compiler會幫我們產生一個不做任何事的Constructor:\r\n                </p>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"java\"\r\n                    code=\"public class A {\r\n}\"\r\n                ></highlightjs>\r\n\r\n                <p>就相當於</p>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"java\"\r\n                    code=\"public class A {\r\n    public A() {}\r\n}\"\r\n                ></highlightjs>\r\n            </div>\r\n\r\n            <div class=\"article-container\">\r\n                <HeaderTemplate\r\n                    :title=\"allHeaders[3].title\"\r\n                    :headerLevel=\"allHeaders[3].headerLevel\"\r\n                    :headerId=\"3\"\r\n                ></HeaderTemplate>\r\n                <!-- <h3>Overloading</h3> -->\r\n\r\n                <p>\r\n                    同一個class裡的Method名稱可以重複使用,只要可以由Method的參數個數和型態來區分就可以了。這種觀念稱為overloading。\r\n                </p>\r\n\r\n                <p>\r\n                    不只一般的method可以overloading,\r\n                    constructor也可以overloading。\r\n                </p>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"java\"\r\n                    code=\"public class Overloading {\r\n                        int data;\r\n    public Overloading() {\r\n        this(0); // call constructor Overloading(int)\r\n    }\r\n    public Overloading(int data) {\r\n        this.data = data;\r\n    }\r\n    public void print() {\r\n        this.print(0); // call method print(int)\r\n    }\r\n    public void print(int msg) {\r\n        }\r\n    public void print(float msg) {\r\n        }\r\n    public void print(int msg, String others) {\r\n        }\r\n}\"\r\n                ></highlightjs>\r\n\r\n                <p>\r\n                    上面的例子裡說明constructor也可以overloading。要特別注意的是,傳回值並不能用來分辨要呼叫哪個method,因此若再加上public\r\n                    int print()的宣告,就會造成編譯錯誤了。\r\n                </p>\r\n\r\n                <!-- <h3>初始化的執行順序</h3> -->\r\n                <HeaderTemplate\r\n                    :title=\"allHeaders[4].title\"\r\n                    :headerLevel=\"allHeaders[4].headerLevel\"\r\n                    :headerId=\"4\"\r\n                ></HeaderTemplate>\r\n\r\n                <p>\r\n                    Class variable是在該類別載入JVM時進行初始化的,\r\n                    因此寫作上經常在class\r\n                    variable的宣告後面加上初始化的動作。對Object\r\n                    Variable來說, 是在產生Object時進行初始化的,\r\n                    但初始化的步驟可以寫在變數宣告後,\r\n                    也可以寫在constructor內,\r\n                    因此必須對其執行順序有所了解。步驟如下:\r\n                </p>\r\n\r\n                <ol>\r\n                    <li>\r\n                        先將所有變數設為內定值。對數值型態來說,\r\n                        其值為0;對reference來說,\r\n                        其值為null;對boolean來說, 其值為false。\r\n                    </li>\r\n                    <li>呼叫父類別的constructor。</li>\r\n                    <li>執行變數宣告的初始化動作。</li>\r\n                    <li>執行自己的constructor。</li>\r\n                </ol>\r\n\r\n                <p>因此在如下的範例內</p>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"java\"\r\n                    code=\"public class InitSequence {\r\n    int data = 2;\r\n    public InitSequence(int data) {\r\n        this.data = data;\r\n    }\r\n    public static void main(String[] argv) {\r\n        InitSequence s = new InitSequence(3);\r\n        System.out.println(s.data);\r\n    }\r\n}\"\r\n                ></highlightjs>\r\n\r\n                <p>data的變化如下</p>\r\n\r\n                <ol>\r\n                    <li>設為內定值0</li>\r\n                    <li>\r\n                        呼叫父類別的Constructor。因為類別InitSequence沒有宣告繼承任何類別,\r\n                        Java規定此情況會自動繼承java.lang.Object這個類別。Object的Constructor不做任何事。\r\n                    </li>\r\n                    <li>執行變數宣告的初始動作,成為2</li>\r\n                    <li>執行自己的constructor,成為3</li>\r\n                </ol>\r\n\r\n                <p>因此最後執行的結果會在螢幕上印出數字3。</p>\r\n\r\n                <p>Java語言還可以定義static block:</p>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"java\"\r\n                    code=\"public class StaticBlock {\r\n    static { // this is a static block\r\n        data = (int)(Math.random()*100);\r\n    }\r\n    static int data;\r\n    public static void main(String[] argv) {\r\n        System.out.println(data);\r\n    }\r\n}\"\r\n                ></highlightjs>\r\n\r\n                <p>\r\n                    static block內的程式碼, 是在該class載入JVM之後,\r\n                    進行class\r\n                    variable初始化之前的時間內執行。一般比較會使用static\r\n                    block的場合, 是該class用到一些非Java的程式庫,\r\n                    需要透過System.loadLibrary(String\r\n                    libName)方法把外界的程式碼載入時。這樣寫的好處是只有當該class第一次被使用到時,\r\n                    才會下載相關軟體, 以節省記憶體空間, 避免重複下載,\r\n                    並可以把實作的細節和外界隔離開來。對沒有這種機制的C語言來說,\r\n                    很可能就必須在主程式內寫上一堆很難懂的啟動程式碼。\r\n                </p>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"java\"\r\n                    code='class ClassNeedToLoadLibrary {\r\n    static {\r\n        System.loadLibrary(\"mylib\");\r\n    }\r\n}\r\npublic class Main {\r\n    public static void main(String[] argv) {\r\n    }\r\n}'\r\n                ></highlightjs>\r\n            </div>\r\n            <div class=\"article-container\">\r\n                <!-- <h3>final關鍵字</h3> -->\r\n                <HeaderTemplate\r\n                    :title=\"allHeaders[5].title\"\r\n                    :headerLevel=\"allHeaders[5].headerLevel\"\r\n                    :headerId=\"5\"\r\n                ></HeaderTemplate>\r\n\r\n                <p>\r\n                    final關鍵字用在變數宣告時,表示該變數的值只能在宣告時給定,然後就不能再更改了。\r\n                </p>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"java\"\r\n                    code=\"public class Main {\r\n    public static final double PI = 3.14159;\r\n    public final int x = 10;\r\n    public static void main(String[] argv) {\r\n        final int local = 10;\r\n        Main m = new Main();\r\n        PI = 100; // Compile Error, final variable can only be set at initialization\r\n        m.x = 10; // Compile Error\r\n        local = 100; // Compile Error\r\n    }\r\n}\"\r\n                ></highlightjs>\r\n            </div>\r\n        </div>\r\n        <TableOfContentSidebar\r\n            :allHeaders=\"allHeaders\"\r\n        ></TableOfContentSidebar>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport \"highlight.js/lib/common\";\r\nimport hljsVuePlugin from \"@highlightjs/vue-plugin\";\r\nimport TableOfContentSidebar from \"@/components/TableOfContentSidebar.vue\";\r\nimport HeaderTemplate from \"@/components/HeaderTemplate.vue\";\r\n\r\nexport default {\r\n    name: \"J_Chapter2\",\r\n    components: {\r\n        highlightjs: hljsVuePlugin.component,\r\n        TableOfContentSidebar,\r\n        HeaderTemplate,\r\n    },\r\n    emits: [\"allHeaders\"],\r\n    data() {\r\n        return {\r\n            allHeaders: [\r\n                { title: \"類別與物件的基本概念\", headerLevel: 3 },\r\n                { title: \"如何以Java撰寫類別\", headerLevel: 3 },\r\n                {\r\n                    title: \"Object Method的名稱如果和Class的名稱相同,<br />則表示該Method為Constructor。Constructor不能宣告傳回值。\",\r\n                    headerLevel: 3,\r\n                },\r\n                { title: \"Overloading\", headerLevel: 3 },\r\n                { title: \"初始化的執行順序\", headerLevel: 3 },\r\n                { title: \"final關鍵字\", headerLevel: 3 },\r\n            ],\r\n        };\r\n    },\r\n    mounted() {\r\n        this.$emit(\"allHeaders\", this.allHeaders);\r\n    },\r\n};\r\n</script>\r\n","import { render } from \"./J_Chapter2.vue?vue&type=template&id=41a364d1\"\nimport script from \"./J_Chapter2.vue?vue&type=script&lang=js\"\nexport * from \"./J_Chapter2.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"D:\\\\Doxument_D\\\\University\\\\Work\\\\Year_1\\\\2nd\\\\Computer_Architecture\\\\Report\\\\final-site\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n    <h1 v-if=\"headerLevel === 1\" :id=\"headerId\" v-html=\"title\"></h1>\r\n    <h2\r\n        v-else-if=\"headerLevel === 2\"\r\n        :id=\"headerId\"\r\n        v-html=\"title\"\r\n    ></h2>\r\n    <h3\r\n        v-else-if=\"headerLevel === 3\"\r\n        :id=\"headerId\"\r\n        v-html=\"title\"\r\n    ></h3>\r\n    <h4\r\n        v-else-if=\"headerLevel === 4\"\r\n        :id=\"headerId\"\r\n        v-html=\"title\"\r\n    ></h4>\r\n    <h5\r\n        v-else-if=\"headerLevel === 5\"\r\n        :id=\"headerId\"\r\n        v-html=\"title\"\r\n    ></h5>\r\n    <h6\r\n        v-else-if=\"headerLevel === 6\"\r\n        :id=\"headerId\"\r\n        v-html=\"title\"\r\n    ></h6>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: \"HeaderTemplate\",\r\n    props: {\r\n        title: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        headerLevel: {\r\n            type: Number,\r\n            required: true,\r\n        },\r\n        headerId: {\r\n            type: Number,\r\n            default: -1,\r\n        },\r\n    },\r\n    computed: {\r\n        headerAssembly() {\r\n            return ``;\r\n        },\r\n    },\r\n};\r\n</script>\r\n","import { render } from \"./HeaderTemplate.vue?vue&type=template&id=27e80327\"\nimport script from \"./HeaderTemplate.vue?vue&type=script&lang=js\"\nexport * from \"./HeaderTemplate.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"D:\\\\Doxument_D\\\\University\\\\Work\\\\Year_1\\\\2nd\\\\Computer_Architecture\\\\Report\\\\final-site\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","_createElementVNode","_createElementBlock","_createVNode","_component_HeaderTemplate","title","$data","headerLevel","headerId","_hoisted_4","_hoisted_11","_component_highlightjs","autodetect","code","_hoisted_12","language","_hoisted_13","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_32","_component_TableOfContentSidebar","allHeaders","name","components","highlightjs","hljsVuePlugin","TableOfContentSidebar","HeaderTemplate","emits","data","mounted","this","$emit","__exports__","render","$props","id","innerHTML","props","type","String","required","Number","default","computed","headerAssembly"],"sourceRoot":""}