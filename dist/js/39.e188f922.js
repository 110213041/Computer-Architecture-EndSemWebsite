"use strict";(self["webpackChunkfinal_site"]=self["webpackChunkfinal_site"]||[]).push([[39],{7039:function(e,n,t){t.r(n),t.d(n,{default:function(){return g}});var l=t(3396);const a={class:"chapter-container"},r={class:"chapter-article"},i=(0,l.Uk)(" C語言以連續的記憶體空間來表達陣列，多維陣列的地址運算採用 "),s=(0,l.Uk)("row major的方式"),d=(0,l.Uk)(" 的方式。這種做法的好處是索引運算速度快，甚至能用pointer來逐一檢視其內容。但這種實作方法在傳遞陣列參數時, 就有一些問題產生了 "),u=(0,l._)("p",null," 假設有一函數sum(int x[])可用來將陣列內的函數全部加總起來，則僅靠傳遞陣列開頭地址是不夠的，還必須傳遞該陣列的長度才行。如 ",-1),o=(0,l._)("p",null," 由於長度的資訊並不在陣列內，必須靠設計者另外告知才行，不小心的話容易發生不一致的情形。 ",-1),c=(0,l._)("p",null," 另一種方法是規範該陣列必須以某個特殊的數值當作結尾，函數必須自行檢查該數值，以確保程式正確。C語言的字串就是利用以0結尾的陣列來表達。 ",-1);function h(e,n,t,h,m,p){const H=(0,l.up)("HeaderTemplate"),v=(0,l.up)("router-link"),f=(0,l.up)("highlightjs"),x=(0,l.up)("TableOfContentSidebar");return(0,l.wg)(),(0,l.iD)("div",a,[(0,l._)("div",r,[(0,l.Wm)(H,{title:m.allHeaders[0].title,headerLevel:m.allHeaders[0].headerLevel,headerId:0},null,8,["title","headerLevel"]),(0,l._)("p",null,[i,(0,l.Wm)(v,{to:"/C"},{default:(0,l.w5)((()=>[s])),_:1}),d]),(0,l.Wm)(f,{class:"code-container",language:"c",code:"int sum(int x[]) {\r\n    // x的長度到底是多少? 不知道的話程式要怎麼寫?\r\n    // 如果宣告成 int sum(int x[100])則此函數就只能接受長度為100的陣列\r\n}\r\nint main() {\r\n    int x[100];\r\n    int y[200];\r\n    sum(x);\r\n    sum(y);\r\n}"}),u,(0,l.Wm)(f,{class:"code-container",language:"c",code:"int sum(int x[], int len) {\r\n    int i, total = 0;\r\n    for (i = 0; i < len; i++) {\r\n        total += x[i];\r\n    }\r\n    return total;\r\n}\r\nint main() {\r\n    int x[100];\r\n    int y[200];\r\n    sum(x, 100);\r\n    sum(y, 200);\r\n}"}),o,c,(0,l.Wm)(H,{title:m.allHeaders[1].title,headerLevel:m.allHeaders[1].headerLevel,headerId:1},null,8,["title","headerLevel"])]),(0,l.Wm)(x,{allHeaders:m.allHeaders},null,8,["allHeaders"])])}var m=t(762),p=t(6569),H=t(5124),v={name:"J_Chapter3",components:{highlightjs:m.Z.component,TableOfContentSidebar:p.Z,HeaderTemplate:H.Z},emits:["allHeaders"],data(){return{allHeaders:[{title:"C語言陣列回顧",headerLevel:2},{title:"Java陣列的特性",headerLevel:2}]}},mounted(){this.$emit("allHeaders",this.allHeaders)},updated(){this.$emit("allHeaders",this.allHeaders)}},f=t(89);const x=(0,f.Z)(v,[["render",h]]);var g=x}}]);
//# sourceMappingURL=39.e188f922.js.map