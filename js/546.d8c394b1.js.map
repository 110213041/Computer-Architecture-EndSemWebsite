{"version":3,"file":"js/546.d8c394b1.js","mappings":"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","sources":["webpack://final-site/./src/assets/Java/J_Chapter3.vue","webpack://final-site/./src/assets/Java/J_Chapter3.vue?bf9d"],"sourcesContent":["<template>\r\n    <div class=\"chapter-container\">\r\n        <div class=\"chapter-article\">\r\n            <div class=\"article-container\">\r\n                <HeaderTemplate\r\n                    :title=\"allHeaders[0].title\"\r\n                    :headerLevel=\"allHeaders[0].headerLevel\"\r\n                    :headerId=\"0\"\r\n                ></HeaderTemplate>\r\n\r\n                <p>\r\n                    C語言以連續的記憶體空間來表達陣列，多維陣列的地址運算採用\r\n                    <router-link to=\"/C\">row major的方式</router-link>\r\n                    的方式。這種做法的好處是索引運算速度快，甚至能用pointer來逐一檢視其內容。但這種實作方法在傳遞陣列參數時,\r\n                    就有一些問題產生了\r\n                </p>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"c\"\r\n                    code=\"int sum(int x[]) {\r\n    // x的長度到底是多少? 不知道的話程式要怎麼寫?\r\n    // 如果宣告成 int sum(int x[100])則此函數就只能接受長度為100的陣列\r\n}\r\nint main() {\r\n    int x[100];\r\n    int y[200];\r\n    sum(x);\r\n    sum(y);\r\n}\"\r\n                ></highlightjs>\r\n\r\n                <p>\r\n                    假設有一函數sum(int\r\n                    x[])可用來將陣列內的函數全部加總起來，則僅靠傳遞陣列開頭地址是不夠的，還必須傳遞該陣列的長度才行。如\r\n                </p>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"c\"\r\n                    code=\"int sum(int x[], int len) {\r\n    int i, total = 0;\r\n    for (i = 0; i < len; i++) {\r\n        total += x[i];\r\n    }\r\n    return total;\r\n}\r\nint main() {\r\n    int x[100];\r\n    int y[200];\r\n    sum(x, 100);\r\n    sum(y, 200);\r\n}\"\r\n                ></highlightjs>\r\n\r\n                <p>\r\n                    由於長度的資訊並不在陣列內，必須靠設計者另外告知才行，不小心的話容易發生不一致的情形。\r\n                </p>\r\n\r\n                <p>\r\n                    另一種方法是規範該陣列必須以某個特殊的數值當作結尾，函數必須自行檢查該數值，以確保程式正確。C語言的字串就是利用以0結尾的陣列來表達。\r\n                </p>\r\n            </div>\r\n            <div class=\"article-container\">\r\n                <HeaderTemplate\r\n                    :title=\"allHeaders[1].title\"\r\n                    :headerLevel=\"allHeaders[1].headerLevel\"\r\n                    :headerId=\"1\"\r\n                ></HeaderTemplate>\r\n\r\n                <p>\r\n                    Java的陣列並不以一塊連續的記憶體空間來表達，而是把陣列視為特殊的物件。此物件不但可存放資料，還利用object\r\n                    variable length記錄著該陣列的長度。\r\n                </p>\r\n\r\n                <div class=\"img-container\">\r\n                    <img src=\"@/assets/Java/JArray1.jpg\" alt=\"\" />\r\n                </div>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"java\"\r\n                    code=\"public class ArrayExample {\r\n    public static void main(String[] argv) {\r\n        int[] x; // x is a reference to int[]\r\n        x = new int[10]; // 利用new指令產生物件\r\n        for (int i = 0; i < x.length; i++) { // 此物件有一個object variable length，用以紀錄該陣列的長度\r\n            x[i] = i;\r\n        }\r\n    }\r\n}\"\r\n                ></highlightjs>\r\n\r\n                <p>\r\n                    length變數宣告為final，因此陣列物件產生後，就不能再變更其長度了\r\n                </p>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"java\"\r\n                    code=\"public class ArrayExample {\r\n    public static void main(String[] argv) {\r\n        int[] x; // x is a reference to int[]\r\n        x = new int[10]; // 利用new指令產生物件\r\n        x.length = 1; // Compile Error\r\n    }\r\n}\r\n\"\r\n                ></highlightjs>\r\n\r\n                <p>\r\n                    在陣列變數的宣告中，要注意和C語言特別不同的地方是:\r\n                </p>\r\n\r\n                <ul>\r\n                    <li>\r\n                        []沒有數字。因為陣列是一種物件，必須以new指令產生物件，int[]\r\n                        x只是宣告x是一個reference to int[]物件而已。\r\n                    </li>\r\n                    <li>\r\n                        []在變數的左邊，而不是右邊。[]屬於宣告型態的一部份，不牽扯空間分配，也不像C語言有和pointer,function混合運用的情況，因此語法要把[]放在變數左邊，方便判讀。\r\n                    </li>\r\n                </ul>\r\n\r\n                <p>我們也可以在變數宣告或是new陣列時就給定初始值:</p>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"java\"\r\n                    code=\"public class Arrays {\r\n    public static void main(String[] args) {\r\n        int[] a1 = { 1, 2, 3, 4, 5 };\r\n        Object[] a2 =  new Object[] {\r\n            new Integer(47), new Long(10),\r\n            new Float(3.14), new Double(11.11)\r\n        };\r\n    }\r\n}\"\r\n                ></highlightjs>\r\n            </div>\r\n            <div class=\"article-container\">\r\n                <HeaderTemplate\r\n                    :title=\"allHeaders[2].title\"\r\n                    :headerLevel=\"allHeaders[2].headerLevel\"\r\n                    :headerId=\"2\"\r\n                ></HeaderTemplate>\r\n\r\n                <p>\r\n                    Java陣列物件是只能儲存基本資料型態或reference的一維陣列，二維以上的陣列是透過reference指到其他的一維陣列物件來達成。\r\n                </p>\r\n\r\n                <div class=\"img-container\">\r\n                    <img src=\"@/assets/Java/JArray2.jpg\" alt=\"\" />\r\n                </div>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"java\"\r\n                    code=\"public class ArrayExample2 {\r\n    public static void main(String[] argv) {\r\n        int[][] x;\r\n        x = new int[10][20];\r\n        for (int i = 0; i < x.length; i++) {\r\n            for (int j = 0; j < x[i].length; j++) {\r\n                x[i][j] = i + j;\r\n            }\r\n        }\r\n    }\r\n}\"\r\n                ></highlightjs>\r\n\r\n                <p>\r\n                    上述的範例中，x宣告為reference to\r\n                    int[][],x[i][j]事實上是先找出reference\r\n                    x[i]，再找x[i]所指到的陣列物件內的第j個元素。由於Java採用這種機制，因此下面的有趣情形就發生了:\r\n                </p>\r\n\r\n                <div class=\"img-container\">\r\n                    <img src=\"@/assets/Java/JArray3.jpg\" alt=\"\" />\r\n                </div>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"java\"\r\n                    code=\"public class ArrayExample3 {\r\n    public static void main(String[] argv) {\r\n        int[][] x;\r\n        x = new int[10][]; // 先產生x陣列\r\n        for (int i = 0; i < x.length; i++) {\r\n            x[i] = new int[i]; // 再分別產生x[i]所指到的陣列\r\n        }\r\n        for (int i = 0; i < x.length; i++) {\r\n            for (int j = 0; j < x[i].length; j++) {\r\n                x[i][j] = i + j;\r\n            }\r\n        }\r\n    }\r\n}\"\r\n                ></highlightjs>\r\n\r\n                <p>上述範例有兩點要注意</p>\r\n\r\n                <ul>\r\n                    <li>陣列的長度可以為0</li>\r\n                    <li>\r\n                        由於以一維陣列來模擬二維陣列，因此透過第一個陣列的reference所找到的陣列，其長度不必然相同\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n            <div class=\"article-container\">\r\n                <HeaderTemplate\r\n                    :title=\"allHeaders[3].title\"\r\n                    :headerLevel=\"allHeaders[3].headerLevel\"\r\n                    :headerId=\"3\"\r\n                ></HeaderTemplate>\r\n                <p>\r\n                    C語言不會對陣列的索引進行任何檢查，保證索引值在陣列的合法範圍內，是設計者的責任。像是下列的範例就很可能產生Segmentation\r\n                    Fault。\r\n                </p>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    autodetect\r\n                    code=\"int main() {\r\n    int i;\r\n    int x[10];\r\n    for (i = 0; i <= 10; i++) {\r\n        x[i] = i;\r\n    }\r\n}\"\r\n                ></highlightjs>\r\n\r\n                <p>\r\n                    由於這類的疏忽很難完全避免，而且不容易找出錯誤，因此Java在執行期間會對陣列的索引做檢查，如果超出來合法範圍，就會產生ArrayIndexOutOfBoundException的例外。若程式設計時沒有指定這種例外的處理方式，則整個程式會終止，並於螢幕上印出相關的錯誤訊息。例如執行下面的程式:\r\n                </p>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"java\"\r\n                    code=\"public class ArrayExample4 {\r\n    public static void main(String[] argv) {\r\n        int[] x = new int[10];\r\n        for (int i = 0; i <= 10; i++) {\r\n            x[i] = i;\r\n        }\r\n    }\r\n}\"\r\n                ></highlightjs>\r\n\r\n                <p>就會產生如下的錯誤訊息，並且終止該程式</p>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    autodetect\r\n                    code='java.lang.ArrayIndexOutOfBoundsException: 10\r\n\tat ArrayExample4.main(ArrayExample4.java:5)\r\nException in thread \"main\"'\r\n                ></highlightjs>\r\n\r\n                <p>上面訊息的意義是:</p>\r\n\r\n                <ul>\r\n                    <li>\r\n                        java.lang.ArrayIndexOutOfBoundsException:\r\n                        10告訴我們索引值是10的時候引起了此問題\r\n                    </li>\r\n                    <li>\r\n                        at\r\n                        ArrayExample4.main(ArrayExample4.java:5)告訴我們呼叫ArrayExample4.main時在ArrayExample4.java的第五行產生錯誤\r\n                    </li>\r\n                </ul>\r\n\r\n                <p>\r\n                    對於寫過C語言的人來說，第一次看到這樣的訊息都會很興奮，因為JVM明明白白的告訴我們哪一行出了甚麼錯誤，要除錯就簡單多了。\r\n                </p>\r\n\r\n                <p>\r\n                    當然這樣的便利性是用效能換來的。如果你的應用需要大量存取陣列，而且速度非常重要，連幾個machine\r\n                    cycle都要計較,那才要考慮不用Java了。\r\n                </p>\r\n            </div>\r\n\r\n            <div class=\"article-container\">\r\n                <HeaderTemplate\r\n                    :title=\"allHeaders[4].title\"\r\n                    :headerLevel=\"allHeaders[4].headerLevel\"\r\n                    :headerId=\"4\"\r\n                ></HeaderTemplate>\r\n\r\n                <HeaderTemplate\r\n                    :title=\"allHeaders[5].title\"\r\n                    :headerLevel=\"allHeaders[5].headerLevel\"\r\n                    :headerId=\"5\"\r\n                ></HeaderTemplate>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"java\"\r\n                    code=\"public class Fab {\r\n    private static long[] rel = {0,1,1,2,3,5,8,13,21,34,55,89};\r\n\tpublic static void main(String[] argv) {\r\n        val(10);\r\n    }\r\n    public static long val(int n) {\r\n        if (rel.length <= n) {\r\n            long[] tt = new long[n+1];\r\n            int i;\r\n            for (i = 0; i < rel.length; i++) {\r\n                tt[i] = rel[i];\r\n            }\r\n            for (; i <= n; i++) {\r\n                tt[i] = tt[i-1] + tt[i-2];\r\n            }\r\n            rel = tt;\r\n        }\r\n        return rel[n];\r\n    }\r\n}\"\r\n                ></highlightjs>\r\n\r\n                <HeaderTemplate\r\n                    :title=\"allHeaders[6].title\"\r\n                    :headerLevel=\"allHeaders[6].headerLevel\"\r\n                    :headerId=\"6\"\r\n                ></HeaderTemplate>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"java\"\r\n                    code=\"public class SelectionSort {\r\n    public static void main(String[] argv) {\r\n        int[] data = {6, 3, 7, 1, 4, 8};\r\n        sort(data);\r\n        for (int i = 0; i < data.length; i++) {\r\n            System.out.println(data[i]);\r\n        }\r\n    }\r\n    public static void sort(int[] data) {\r\n        for (int i = 0; i < data.length - 1; i++) {\r\n            // find minimun in i ~ data.length - 1\r\n            int mim = i;\r\n            for (int j = i + 1; j < data.length; j++) {\r\n                if (data[min] > data[j]) {\r\n                    min = j;\r\n                }\r\n            }\r\n            // swap data[i] with data[min]\r\n            int tmp = data[i];\r\n            data[i] = data[min];\r\n            data[min] = tmp;\r\n        }\r\n    }\r\n}\"\r\n                ></highlightjs>\r\n\r\n                <HeaderTemplate\r\n                    :title=\"allHeaders[7].title\"\r\n                    :headerLevel=\"allHeaders[7].headerLevel\"\r\n                    :headerId=\"7\"\r\n                ></HeaderTemplate>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"java\"\r\n                    code=\"public class InsertionSort {\r\n    public static void main(String[] argv) {\r\n        int[] data = {4, 1, 7, 8, 9, 3, 2};\r\n        sort(data);\r\n        for (int i = 0; i < data.length; i++) {\r\n            System.out.println(data[i]);\r\n        }\r\n    }\r\n    public static void sort(int[] data) {\r\n        int j, pivot;\r\n        // insert data[i] to sorted array 0 ~ i - 1\r\n        // begins from i = 1, because if the array has only one element then it must be sorted.\r\n        for (int i = 1; i < data.length; i++) { \r\n            pivot = data[i];\r\n            for (j = i - 1; j >= 0 && data[j] > pivot; j--) { \r\n                // shift data[j] larger than pivot to right\r\n                data[j+1] = data[j];\r\n            }\r\n            data[j+1] = pivot; \r\n        }\r\n    }\r\n}\"\r\n                ></highlightjs>\r\n\r\n                <HeaderTemplate\r\n                    :title=\"allHeaders[8].title\"\r\n                    :headerLevel=\"allHeaders[8].headerLevel\"\r\n                    :headerId=\"8\"\r\n                ></HeaderTemplate>\r\n\r\n                <p>下圖為n=6的情況</p>\r\n\r\n                <pre>\r\n             1\r\n           1   1\r\n         1   2   1\r\n       1   3   3   1\r\n     1   4   6   4   1\r\n   1   5   10  10  5   1\r\n 1   6   15  20  15  6   1\r\n</pre\r\n                >\r\n                <p>\r\n                    其規則是最外層是1, 裡面每個數字都是上方兩個數字的和.\r\n                    Pascal Triangle是(x + y)n每個項次的係數.\r\n                </p>\r\n\r\n                <p>\r\n                    提示: 如果把上圖左邊的空白拿掉則會變成下面的圖形,\r\n                    除了最左邊和最右邊的數字是1以外,\r\n                    裡面的每一個數字都是其正上方和左上方數字的和.\r\n                    你可以用陣列來計算和儲存這些數字,\r\n                    然後再以上圖的格式印出來.\r\n                </p>\r\n\r\n                <pre>\r\n1\r\n1   1\r\n1   2   1\r\n1   3   3   1\r\n1   4   6   4   1\r\n1   5   10  10  5   1\r\n1   6   15  20  15  6   1\r\n</pre\r\n                >\r\n\r\n                <p>所以只要你能回答下面問題, 程式就寫完了:</p>\r\n\r\n                <ul>\r\n                    <li>\r\n                        如果要用*號印出這種形狀的三角形, 該怎麼寫?\r\n                        (迴圈範例裡已經練習過了)\r\n                    </li>\r\n                    <li>最左邊和最右邊如何表達?</li>\r\n                    <li>\r\n                        內部每一個數字都是正上方和左上方數字,\r\n                        請問正上方和左上方這兩個位置的陣列索引如何表達?\r\n                    </li>\r\n                </ul>\r\n\r\n                <p>以下是程式的範例:</p>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"java\"\r\n                    code='/**\r\n * Program Name: Pascal.java\r\n * Purpose: print pascal triangle on screen\r\n * Author: Shiuh-Sheng Yu, Department of Information Management\r\n *         National ChiNan University\r\n * Since: 2006/01/23\r\n */\r\npublic class Pascal {\r\n    public static void main(String[] argv) {\r\n        int n, i, j;\r\n        int[][] tri = new int[51][51];\r\n        n = Integer.parseInt(argv[0]);\r\n        if (n < 0 || n > 50) {\r\n            System.out.println(\"I can only print Pascal triangle between 0 and 50.\\n\");\r\n        } else {\r\n            for (i = 0; i <= n; i++) {\r\n                for (j = 0; j <= i; j++) {\r\n                    System.out.print(\"  \"+(tri[i][j] = (j==0 || j==i) ? 1 : tri[i-1][j-1]+tri[i-1][j]));\r\n                }\r\n                System.out.println();\r\n            }\r\n        }\r\n    }\r\n}'\r\n                ></highlightjs>\r\n\r\n                <HeaderTemplate\r\n                    :title=\"allHeaders[9].title\"\r\n                    :headerLevel=\"allHeaders[9].headerLevel\"\r\n                    :headerId=\"9\"\r\n                ></HeaderTemplate>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"java\"\r\n                    code='public class Example {\r\n    /* 列出由at左邊所有的排列 */\r\n    private static void permutation(int data[], int n, int got) {\r\n        // 如果已經排到最後了,印出結果\r\n        if (n == got) {\r\n            for (int i = 0; i < n; i++) {\r\n                System.out.print(data[i]+\" \");\r\n            }\r\n            System.out.println();\r\n            return;\r\n        }\r\n        int tmp;\r\n        for (int i = got; i < data.length; i++) {\r\n            // swap data[i] and data[at]\r\n            tmp = data[i];\r\n            data[i] = data[got];\r\n            data[got] = tmp;\r\n            // 然後遞迴呼叫,以找出got+1右邊的所有排列\r\n            permutation(data, n, got + 1);\r\n            // swap back data[i] and data[got]\r\n            tmp = data[i];\r\n            data[i] = data[got];\r\n            data[got] = tmp;\r\n        }\r\n    }\r\n    public static void permutation(int data[], int n) {\r\n        permutation(data, n, 0);\r\n    }\r\n    public static void main(String[] argv) {\r\n        int data[] = {1,2,3,4,5,6};\r\n        permutation(data, 4);\r\n    }\r\n}'\r\n                ></highlightjs>\r\n\r\n                <HeaderTemplate\r\n                    :title=\"allHeaders[10].title\"\r\n                    :headerLevel=\"allHeaders[10].headerLevel\"\r\n                    :headerId=\"10\"\r\n                ></HeaderTemplate>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"java\"\r\n                    code='public class Example {\r\n    /* 由data.length取n個 */\r\n    private static void combination(int[] data, int n, int got, int from) {\r\n        int tmp;\r\n        if (n == got) {\r\n            for (int i = 0; i < n; i++) {\r\n                System.out.print(data[i] + \" \");\r\n            }\r\n            System.out.println();\r\n            return;\r\n        }\r\n        for (int i = from; i < data.length; i++) {\r\n            // 選第i個, by swap data[i] and data[got]\r\n            tmp = data[i];\r\n            data[i] = data[got];\r\n            data[got] = tmp;\r\n            combination(data, n, got + 1, i + 1);\r\n            // swap back data[i] and data[got]\r\n            // two swaps make data original\r\n            tmp = data[i];\r\n            data[i] = data[got];\r\n            data[got] = tmp;\r\n        }\r\n    }\r\n    // data裡找出所有n個數字組合\r\n    public static void combination(int data[], int n) {\r\n        combination(data, n, 0, 0);\r\n    }\r\n    public static void main(String[] argv) {\r\n        int[] data = {1,2,3,4,5};\r\n        combination(data, 3);\r\n    }\r\n}'\r\n                ></highlightjs>\r\n\r\n                <HeaderTemplate\r\n                    :title=\"allHeaders[11].title\"\r\n                    :headerLevel=\"allHeaders[11].headerLevel\"\r\n                    :headerId=\"11\"\r\n                ></HeaderTemplate>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"java\"\r\n                    code=\"public class Example {\r\n    public static void main(String[] argv) {\r\n        char[] data = {'1', '2', '3', '4'};\r\n        reverse(data);\r\n        for (int i = 0; i < data.length; i++) {\r\n            System.out.print(data[i]+&quot; &quot;);\r\n        }\r\n    }\r\n    public static void reverse(char[] data) {\r\n        char tmp;\r\n        for (int i = 0, j = data.length - 1; i < j; i++, j--) {\r\n            tmp = data[i];\r\n            data[i] = data[j];\r\n            data[j] = tmp;\r\n        }\r\n    }\r\n}\"\r\n                ></highlightjs>\r\n\r\n                <HeaderTemplate\r\n                    :title=\"allHeaders[12].title\"\r\n                    :headerLevel=\"allHeaders[12].headerLevel\"\r\n                    :headerId=\"12\"\r\n                ></HeaderTemplate>\r\n\r\n                <highlightjs\r\n                    class=\"code-container\"\r\n                    language=\"java\"\r\n                    code=\"public class Stack {\r\n    private Object[] data;\r\n    private int top;\r\n    public Stack() { // constructor\r\n        data = new Object[1024];\r\n    }\r\n    public void push(Object obj) {\r\n        if (top >= data.length) {\r\n            Object[] tmp = new Object[data.length*2];\r\n            System.arraycopy(data, 0, tmp, 0, data.length);\r\n            data = tmp;\r\n        }\r\n        data[top++] = obj;\r\n    }\r\n    public Object pop() {\r\n        return data[--top];\r\n    }\r\n    public Object peek() {\r\n        return data[top-1];\r\n    }\r\n    public int size() {\r\n        return top;\r\n    }\r\n}\"\r\n                ></highlightjs>\r\n            </div>\r\n        </div>\r\n        <TableOfContentSidebar\r\n            :allHeaders=\"allHeaders\"\r\n        ></TableOfContentSidebar>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport hljs from \"highlight.js/lib/common\";\r\nimport hljsVuePlugin from \"@highlightjs/vue-plugin\";\r\nimport TableOfContentSidebar from \"@/components/TableOfContentSidebar.vue\";\r\nimport HeaderTemplate from \"@/components/HeaderTemplate.vue\";\r\n\r\nexport default {\r\n    name: \"J_Chapter3\",\r\n    components: {\r\n        highlightjs: hljsVuePlugin.component,\r\n        TableOfContentSidebar,\r\n        HeaderTemplate,\r\n    },\r\n    emits: [\"allHeaders\"],\r\n    data() {\r\n        return {\r\n            allHeaders: [\r\n                { title: \"C語言陣列回顧\", headerLevel: 2 },\r\n                {\r\n                    title: \"Java陣列的特性\",\r\n                    headerLevel: 2,\r\n                },\r\n                { title: \"多維陣列\", headerLevel: 2 },\r\n                { title: \"陣列索引的檢查\", headerLevel: 2 },\r\n                { title: \"陣列範例\", headerLevel: 2 },\r\n                { title: \"費氏數\", headerLevel: 3 },\r\n                { title: \"Selection sort\", headerLevel: 3 },\r\n                { title: \"Insertion Sort\", headerLevel: 3 },\r\n                { title: \"Pascal Triangle\", headerLevel: 3 },\r\n                {\r\n                    title: \"列出整數陣列所有n個數字的排列\",\r\n                    headerLevel: 3,\r\n                },\r\n                {\r\n                    title: \"列出整數陣列所有n個數字的組合\",\r\n                    headerLevel: 3,\r\n                },\r\n                { title: \"反轉陣列\", headerLevel: 3 },\r\n                {\r\n                    title: \"Using array to implement Stack\",\r\n                    headerLevel: 3,\r\n                },\r\n            ],\r\n        };\r\n    },\r\n    mounted() {\r\n        this.$emit(\"allHeaders\", this.allHeaders);\r\n    },\r\n};\r\n</script>\r\n","import { render } from \"./J_Chapter3.vue?vue&type=template&id=04664bdc\"\nimport script from \"./J_Chapter3.vue?vue&type=script&lang=js\"\nexport * from \"./J_Chapter3.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"D:\\\\Doxument_D\\\\University\\\\Work\\\\Year_1\\\\2nd\\\\Computer_Architecture\\\\Report\\\\final-site\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","_createElementVNode","src","_imports_0","alt","_imports_1","_imports_2","_createElementBlock","_createVNode","_component_HeaderTemplate","title","$data","headerLevel","headerId","_component_router_link","to","_component_highlightjs","language","code","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_25","autodetect","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_33","_component_TableOfContentSidebar","allHeaders","name","components","highlightjs","hljsVuePlugin","TableOfContentSidebar","HeaderTemplate","emits","data","mounted","this","$emit","__exports__","render"],"sourceRoot":""}