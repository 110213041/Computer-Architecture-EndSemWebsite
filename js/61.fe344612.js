"use strict";(self["webpackChunkfinal_site"]=self["webpackChunkfinal_site"]||[]).push([[61],{2786:function(e,n,a){a.r(n),a.d(n,{default:function(){return Y}});var r=a(3396),t=a.p+"img/JArray1.bf925d82.jpg",i=a.p+"img/JArray2.b4c9ca77.jpg",l=a.p+"img/JArray3.f89f4543.jpg";const d={class:"chapter-container"},o={class:"chapter-article"},c={class:"article-container"},s=(0,r.Uk)(" C語言以連續的記憶體空間來表達陣列，多維陣列的地址運算採用 "),u=(0,r.Uk)("row major的方式"),p=(0,r.Uk)(" 的方式。這種做法的好處是索引運算速度快，甚至能用pointer來逐一檢視其內容。但這種實作方法在傳遞陣列參數時, 就有一些問題產生了 "),m=(0,r._)("p",null," 假設有一函數sum(int x[])可用來將陣列內的函數全部加總起來，則僅靠傳遞陣列開頭地址是不夠的，還必須傳遞該陣列的長度才行。如 ",-1),v=(0,r._)("p",null," 由於長度的資訊並不在陣列內，必須靠設計者另外告知才行，不小心的話容易發生不一致的情形。 ",-1),g=(0,r._)("p",null," 另一種方法是規範該陣列必須以某個特殊的數值當作結尾，函數必須自行檢查該數值，以確保程式正確。C語言的字串就是利用以0結尾的陣列來表達。 ",-1),h={class:"article-container"},j=(0,r._)("p",null," Java的陣列並不以一塊連續的記憶體空間來表達，而是把陣列視為特殊的物件。此物件不但可存放資料，還利用object variable length記錄著該陣列的長度。 ",-1),b=(0,r._)("div",{class:"img-container"},[(0,r._)("img",{src:t,alt:""})],-1),L=(0,r._)("p",null," length變數宣告為final，因此陣列物件產生後，就不能再變更其長度了 ",-1),f=(0,r._)("p",null," 在陣列變數的宣告中，要注意和C語言特別不同的地方是: ",-1),x=(0,r._)("ul",null,[(0,r._)("li",null," []沒有數字。因為陣列是一種物件，必須以new指令產生物件，int[] x只是宣告x是一個reference to int[]物件而已。 "),(0,r._)("li",null," []在變數的左邊，而不是右邊。[]屬於宣告型態的一部份，不牽扯空間分配，也不像C語言有和pointer,function混合運用的情況，因此語法要把[]放在變數左邊，方便判讀。 ")],-1),y=(0,r._)("p",null,"我們也可以在變數宣告或是new陣列時就給定初始值:",-1),H={class:"article-container"},_=(0,r._)("p",null," Java陣列物件是只能儲存基本資料型態或reference的一維陣列，二維以上的陣列是透過reference指到其他的一維陣列物件來達成。 ",-1),w=(0,r._)("div",{class:"img-container"},[(0,r._)("img",{src:i,alt:""})],-1),S=(0,r._)("p",null," 上述的範例中，x宣告為reference to int[][],x[i][j]事實上是先找出reference x[i]，再找x[i]所指到的陣列物件內的第j個元素。由於Java採用這種機制，因此下面的有趣情形就發生了: ",-1),W=(0,r._)("div",{class:"img-container"},[(0,r._)("img",{src:l,alt:""})],-1),I=(0,r._)("p",null,"上述範例有兩點要注意",-1),k=(0,r._)("ul",null,[(0,r._)("li",null,"陣列的長度可以為0"),(0,r._)("li",null," 由於以一維陣列來模擬二維陣列，因此透過第一個陣列的reference所找到的陣列，其長度不必然相同 ")],-1),A={class:"article-container"},E=(0,r._)("p",null," C語言不會對陣列的索引進行任何檢查，保證索引值在陣列的合法範圍內，是設計者的責任。像是下列的範例就很可能產生Segmentation Fault。 ",-1),T=(0,r._)("p",null," 由於這類的疏忽很難完全避免，而且不容易找出錯誤，因此Java在執行期間會對陣列的索引做檢查，如果超出來合法範圍，就會產生ArrayIndexOutOfBoundException的例外。若程式設計時沒有指定這種例外的處理方式，則整個程式會終止，並於螢幕上印出相關的錯誤訊息。例如執行下面的程式: ",-1),O=(0,r._)("p",null,"就會產生如下的錯誤訊息，並且終止該程式",-1),C=(0,r._)("p",null,"上面訊息的意義是:",-1),M=(0,r._)("ul",null,[(0,r._)("li",null," java.lang.ArrayIndexOutOfBoundsException: 10告訴我們索引值是10的時候引起了此問題 "),(0,r._)("li",null," at ArrayExample4.main(ArrayExample4.java:5)告訴我們呼叫ArrayExample4.main時在ArrayExample4.java的第五行產生錯誤 ")],-1),J=(0,r._)("p",null," 對於寫過C語言的人來說，第一次看到這樣的訊息都會很興奮，因為JVM明明白白的告訴我們哪一行出了甚麼錯誤，要除錯就簡單多了。 ",-1),D=(0,r._)("p",null," 當然這樣的便利性是用效能換來的。如果你的應用需要大量存取陣列，而且速度非常重要，連幾個machine cycle都要計較,那才要考慮不用Java了。 ",-1),P={class:"article-container"},Z=(0,r.uE)("<p>下圖為n=6的情況</p><pre>             1\r\n           1   1\r\n         1   2   1\r\n       1   3   3   1\r\n     1   4   6   4   1\r\n   1   5   10  10  5   1\r\n 1   6   15  20  15  6   1\r\n</pre><p> 其規則是最外層是1, 裡面每個數字都是上方兩個數字的和. Pascal Triangle是(x + y)n每個項次的係數. </p><p> 提示: 如果把上圖左邊的空白拿掉則會變成下面的圖形, 除了最左邊和最右邊的數字是1以外, 裡面的每一個數字都是其正上方和左上方數字的和. 你可以用陣列來計算和儲存這些數字, 然後再以上圖的格式印出來. </p><pre>1\r\n1   1\r\n1   2   1\r\n1   3   3   1\r\n1   4   6   4   1\r\n1   5   10  10  5   1\r\n1   6   15  20  15  6   1\r\n</pre><p>所以只要你能回答下面問題, 程式就寫完了:</p><ul><li> 如果要用*號印出這種形狀的三角形, 該怎麼寫? (迴圈範例裡已經練習過了) </li><li>最左邊和最右邊如何表達?</li><li> 內部每一個數字都是正上方和左上方數字, 請問正上方和左上方這兩個位置的陣列索引如何表達? </li></ul><p>以下是程式的範例:</p>",8);function N(e,n,a,t,i,l){const N=(0,r.up)("HeaderTemplate"),U=(0,r.up)("router-link"),q=(0,r.up)("highlightjs"),B=(0,r.up)("TableOfContentSidebar");return(0,r.wg)(),(0,r.iD)("div",d,[(0,r._)("div",o,[(0,r._)("div",c,[(0,r.Wm)(N,{title:i.allHeaders[0].title,headerLevel:i.allHeaders[0].headerLevel,headerId:0},null,8,["title","headerLevel"]),(0,r._)("p",null,[s,(0,r.Wm)(U,{to:"/C"},{default:(0,r.w5)((()=>[u])),_:1}),p]),(0,r.Wm)(q,{class:"code-container",language:"c",code:"int sum(int x[]) {\r\n    // x的長度到底是多少? 不知道的話程式要怎麼寫?\r\n    // 如果宣告成 int sum(int x[100])則此函數就只能接受長度為100的陣列\r\n}\r\nint main() {\r\n    int x[100];\r\n    int y[200];\r\n    sum(x);\r\n    sum(y);\r\n}"}),m,(0,r.Wm)(q,{class:"code-container",language:"c",code:"int sum(int x[], int len) {\r\n    int i, total = 0;\r\n    for (i = 0; i < len; i++) {\r\n        total += x[i];\r\n    }\r\n    return total;\r\n}\r\nint main() {\r\n    int x[100];\r\n    int y[200];\r\n    sum(x, 100);\r\n    sum(y, 200);\r\n}"}),v,g]),(0,r._)("div",h,[(0,r.Wm)(N,{title:i.allHeaders[1].title,headerLevel:i.allHeaders[1].headerLevel,headerId:1},null,8,["title","headerLevel"]),j,b,(0,r.Wm)(q,{class:"code-container",language:"java",code:"public class ArrayExample {\r\n    public static void main(String[] argv) {\r\n        int[] x; // x is a reference to int[]\r\n        x = new int[10]; // 利用new指令產生物件\r\n        for (int i = 0; i < x.length; i++) { // 此物件有一個object variable length，用以紀錄該陣列的長度\r\n            x[i] = i;\r\n        }\r\n    }\r\n}"}),L,(0,r.Wm)(q,{class:"code-container",language:"java",code:"public class ArrayExample {\r\n    public static void main(String[] argv) {\r\n        int[] x; // x is a reference to int[]\r\n        x = new int[10]; // 利用new指令產生物件\r\n        x.length = 1; // Compile Error\r\n    }\r\n}\r\n"}),f,x,y,(0,r.Wm)(q,{class:"code-container",language:"java",code:"public class Arrays {\r\n    public static void main(String[] args) {\r\n        int[] a1 = { 1, 2, 3, 4, 5 };\r\n        Object[] a2 =  new Object[] {\r\n            new Integer(47), new Long(10),\r\n            new Float(3.14), new Double(11.11)\r\n        };\r\n    }\r\n}"})]),(0,r._)("div",H,[(0,r.Wm)(N,{title:i.allHeaders[2].title,headerLevel:i.allHeaders[2].headerLevel,headerId:2},null,8,["title","headerLevel"]),_,w,(0,r.Wm)(q,{class:"code-container",language:"java",code:"public class ArrayExample2 {\r\n    public static void main(String[] argv) {\r\n        int[][] x;\r\n        x = new int[10][20];\r\n        for (int i = 0; i < x.length; i++) {\r\n            for (int j = 0; j < x[i].length; j++) {\r\n                x[i][j] = i + j;\r\n            }\r\n        }\r\n    }\r\n}"}),S,W,(0,r.Wm)(q,{class:"code-container",language:"java",code:"public class ArrayExample3 {\r\n    public static void main(String[] argv) {\r\n        int[][] x;\r\n        x = new int[10][]; // 先產生x陣列\r\n        for (int i = 0; i < x.length; i++) {\r\n            x[i] = new int[i]; // 再分別產生x[i]所指到的陣列\r\n        }\r\n        for (int i = 0; i < x.length; i++) {\r\n            for (int j = 0; j < x[i].length; j++) {\r\n                x[i][j] = i + j;\r\n            }\r\n        }\r\n    }\r\n}"}),I,k]),(0,r._)("div",A,[(0,r.Wm)(N,{title:i.allHeaders[3].title,headerLevel:i.allHeaders[3].headerLevel,headerId:3},null,8,["title","headerLevel"]),E,(0,r.Wm)(q,{class:"code-container",autodetect:"",code:"int main() {\r\n    int i;\r\n    int x[10];\r\n    for (i = 0; i <= 10; i++) {\r\n        x[i] = i;\r\n    }\r\n}"}),T,(0,r.Wm)(q,{class:"code-container",language:"java",code:"public class ArrayExample4 {\r\n    public static void main(String[] argv) {\r\n        int[] x = new int[10];\r\n        for (int i = 0; i <= 10; i++) {\r\n            x[i] = i;\r\n        }\r\n    }\r\n}"}),O,(0,r.Wm)(q,{class:"code-container",autodetect:"",code:'java.lang.ArrayIndexOutOfBoundsException: 10\r\n\tat ArrayExample4.main(ArrayExample4.java:5)\r\nException in thread "main"'}),C,M,J,D]),(0,r._)("div",P,[(0,r.Wm)(N,{title:i.allHeaders[4].title,headerLevel:i.allHeaders[4].headerLevel,headerId:4},null,8,["title","headerLevel"]),(0,r.Wm)(N,{title:i.allHeaders[5].title,headerLevel:i.allHeaders[5].headerLevel,headerId:5},null,8,["title","headerLevel"]),(0,r.Wm)(q,{class:"code-container",language:"java",code:"public class Fab {\r\n    private static long[] rel = {0,1,1,2,3,5,8,13,21,34,55,89};\r\n\tpublic static void main(String[] argv) {\r\n        val(10);\r\n    }\r\n    public static long val(int n) {\r\n        if (rel.length <= n) {\r\n            long[] tt = new long[n+1];\r\n            int i;\r\n            for (i = 0; i < rel.length; i++) {\r\n                tt[i] = rel[i];\r\n            }\r\n            for (; i <= n; i++) {\r\n                tt[i] = tt[i-1] + tt[i-2];\r\n            }\r\n            rel = tt;\r\n        }\r\n        return rel[n];\r\n    }\r\n}"}),(0,r.Wm)(N,{title:i.allHeaders[6].title,headerLevel:i.allHeaders[6].headerLevel,headerId:6},null,8,["title","headerLevel"]),(0,r.Wm)(q,{class:"code-container",language:"java",code:"public class SelectionSort {\r\n    public static void main(String[] argv) {\r\n        int[] data = {6, 3, 7, 1, 4, 8};\r\n        sort(data);\r\n        for (int i = 0; i < data.length; i++) {\r\n            System.out.println(data[i]);\r\n        }\r\n    }\r\n    public static void sort(int[] data) {\r\n        for (int i = 0; i < data.length - 1; i++) {\r\n            // find minimun in i ~ data.length - 1\r\n            int mim = i;\r\n            for (int j = i + 1; j < data.length; j++) {\r\n                if (data[min] > data[j]) {\r\n                    min = j;\r\n                }\r\n            }\r\n            // swap data[i] with data[min]\r\n            int tmp = data[i];\r\n            data[i] = data[min];\r\n            data[min] = tmp;\r\n        }\r\n    }\r\n}"}),(0,r.Wm)(N,{title:i.allHeaders[7].title,headerLevel:i.allHeaders[7].headerLevel,headerId:7},null,8,["title","headerLevel"]),(0,r.Wm)(q,{class:"code-container",language:"java",code:"public class InsertionSort {\r\n    public static void main(String[] argv) {\r\n        int[] data = {4, 1, 7, 8, 9, 3, 2};\r\n        sort(data);\r\n        for (int i = 0; i < data.length; i++) {\r\n            System.out.println(data[i]);\r\n        }\r\n    }\r\n    public static void sort(int[] data) {\r\n        int j, pivot;\r\n        // insert data[i] to sorted array 0 ~ i - 1\r\n        // begins from i = 1, because if the array has only one element then it must be sorted.\r\n        for (int i = 1; i < data.length; i++) { \r\n            pivot = data[i];\r\n            for (j = i - 1; j >= 0 && data[j] > pivot; j--) { \r\n                // shift data[j] larger than pivot to right\r\n                data[j+1] = data[j];\r\n            }\r\n            data[j+1] = pivot; \r\n        }\r\n    }\r\n}"}),(0,r.Wm)(N,{title:i.allHeaders[8].title,headerLevel:i.allHeaders[8].headerLevel,headerId:8},null,8,["title","headerLevel"]),Z,(0,r.Wm)(q,{class:"code-container",language:"java",code:'/**\r\n * Program Name: Pascal.java\r\n * Purpose: print pascal triangle on screen\r\n * Author: Shiuh-Sheng Yu, Department of Information Management\r\n *         National ChiNan University\r\n * Since: 2006/01/23\r\n */\r\npublic class Pascal {\r\n    public static void main(String[] argv) {\r\n        int n, i, j;\r\n        int[][] tri = new int[51][51];\r\n        n = Integer.parseInt(argv[0]);\r\n        if (n < 0 || n > 50) {\r\n            System.out.println("I can only print Pascal triangle between 0 and 50.\\n");\r\n        } else {\r\n            for (i = 0; i <= n; i++) {\r\n                for (j = 0; j <= i; j++) {\r\n                    System.out.print("  "+(tri[i][j] = (j==0 || j==i) ? 1 : tri[i-1][j-1]+tri[i-1][j]));\r\n                }\r\n                System.out.println();\r\n            }\r\n        }\r\n    }\r\n}'}),(0,r.Wm)(N,{title:i.allHeaders[9].title,headerLevel:i.allHeaders[9].headerLevel,headerId:9},null,8,["title","headerLevel"]),(0,r.Wm)(q,{class:"code-container",language:"java",code:'public class Example {\r\n    /* 列出由at左邊所有的排列 */\r\n    private static void permutation(int data[], int n, int got) {\r\n        // 如果已經排到最後了,印出結果\r\n        if (n == got) {\r\n            for (int i = 0; i < n; i++) {\r\n                System.out.print(data[i]+" ");\r\n            }\r\n            System.out.println();\r\n            return;\r\n        }\r\n        int tmp;\r\n        for (int i = got; i < data.length; i++) {\r\n            // swap data[i] and data[at]\r\n            tmp = data[i];\r\n            data[i] = data[got];\r\n            data[got] = tmp;\r\n            // 然後遞迴呼叫,以找出got+1右邊的所有排列\r\n            permutation(data, n, got + 1);\r\n            // swap back data[i] and data[got]\r\n            tmp = data[i];\r\n            data[i] = data[got];\r\n            data[got] = tmp;\r\n        }\r\n    }\r\n    public static void permutation(int data[], int n) {\r\n        permutation(data, n, 0);\r\n    }\r\n    public static void main(String[] argv) {\r\n        int data[] = {1,2,3,4,5,6};\r\n        permutation(data, 4);\r\n    }\r\n}'}),(0,r.Wm)(N,{title:i.allHeaders[10].title,headerLevel:i.allHeaders[10].headerLevel,headerId:10},null,8,["title","headerLevel"]),(0,r.Wm)(q,{class:"code-container",language:"java",code:'public class Example {\r\n    /* 由data.length取n個 */\r\n    private static void combination(int[] data, int n, int got, int from) {\r\n        int tmp;\r\n        if (n == got) {\r\n            for (int i = 0; i < n; i++) {\r\n                System.out.print(data[i] + " ");\r\n            }\r\n            System.out.println();\r\n            return;\r\n        }\r\n        for (int i = from; i < data.length; i++) {\r\n            // 選第i個, by swap data[i] and data[got]\r\n            tmp = data[i];\r\n            data[i] = data[got];\r\n            data[got] = tmp;\r\n            combination(data, n, got + 1, i + 1);\r\n            // swap back data[i] and data[got]\r\n            // two swaps make data original\r\n            tmp = data[i];\r\n            data[i] = data[got];\r\n            data[got] = tmp;\r\n        }\r\n    }\r\n    // data裡找出所有n個數字組合\r\n    public static void combination(int data[], int n) {\r\n        combination(data, n, 0, 0);\r\n    }\r\n    public static void main(String[] argv) {\r\n        int[] data = {1,2,3,4,5};\r\n        combination(data, 3);\r\n    }\r\n}'}),(0,r.Wm)(N,{title:i.allHeaders[11].title,headerLevel:i.allHeaders[11].headerLevel,headerId:11},null,8,["title","headerLevel"]),(0,r.Wm)(q,{class:"code-container",language:"java",code:"public class Example {\r\n    public static void main(String[] argv) {\r\n        char[] data = {'1', '2', '3', '4'};\r\n        reverse(data);\r\n        for (int i = 0; i < data.length; i++) {\r\n            System.out.print(data[i]+\" \");\r\n        }\r\n    }\r\n    public static void reverse(char[] data) {\r\n        char tmp;\r\n        for (int i = 0, j = data.length - 1; i < j; i++, j--) {\r\n            tmp = data[i];\r\n            data[i] = data[j];\r\n            data[j] = tmp;\r\n        }\r\n    }\r\n}"}),(0,r.Wm)(N,{title:i.allHeaders[12].title,headerLevel:i.allHeaders[12].headerLevel,headerId:12},null,8,["title","headerLevel"]),(0,r.Wm)(q,{class:"code-container",language:"java",code:"public class Stack {\r\n    private Object[] data;\r\n    private int top;\r\n    public Stack() { // constructor\r\n        data = new Object[1024];\r\n    }\r\n    public void push(Object obj) {\r\n        if (top >= data.length) {\r\n            Object[] tmp = new Object[data.length*2];\r\n            System.arraycopy(data, 0, tmp, 0, data.length);\r\n            data = tmp;\r\n        }\r\n        data[top++] = obj;\r\n    }\r\n    public Object pop() {\r\n        return data[--top];\r\n    }\r\n    public Object peek() {\r\n        return data[top-1];\r\n    }\r\n    public int size() {\r\n        return top;\r\n    }\r\n}"})])]),(0,r.Wm)(B,{allHeaders:i.allHeaders},null,8,["allHeaders"])])}var U=a(9868),q=a(7831),B=a(5124),F={name:"J_Chapter3",components:{highlightjs:U.Z.component,TableOfContentSidebar:q.Z,HeaderTemplate:B.Z},emits:["allHeaders"],data(){return{allHeaders:[{title:"C語言陣列回顧",headerLevel:2},{title:"Java陣列的特性",headerLevel:2},{title:"多維陣列",headerLevel:2},{title:"陣列索引的檢查",headerLevel:2},{title:"陣列範例",headerLevel:2},{title:"費氏數",headerLevel:3},{title:"Selection sort",headerLevel:3},{title:"Insertion Sort",headerLevel:3},{title:"Pascal Triangle",headerLevel:3},{title:"列出整數陣列所有n個數字的排列",headerLevel:3},{title:"列出整數陣列所有n個數字的組合",headerLevel:3},{title:"反轉陣列",headerLevel:3},{title:"Using array to implement Stack",headerLevel:3}]}},mounted(){this.$emit("allHeaders",this.allHeaders)}},z=a(89);const V=(0,z.Z)(F,[["render",N]]);var Y=V},5124:function(e,n,a){a.d(n,{Z:function(){return v}});var r=a(3396);const t=["id","innerHTML"],i=["id","innerHTML"],l=["id","innerHTML"],d=["id","innerHTML"],o=["id","innerHTML"],c=["id","innerHTML"];function s(e,n,a,s,u,p){return 1===a.headerLevel?((0,r.wg)(),(0,r.iD)("h1",{key:0,id:a.headerId,innerHTML:a.title},null,8,t)):2===a.headerLevel?((0,r.wg)(),(0,r.iD)("h2",{key:1,id:a.headerId,innerHTML:a.title},null,8,i)):3===a.headerLevel?((0,r.wg)(),(0,r.iD)("h3",{key:2,id:a.headerId,innerHTML:a.title},null,8,l)):4===a.headerLevel?((0,r.wg)(),(0,r.iD)("h4",{key:3,id:a.headerId,innerHTML:a.title},null,8,d)):5===a.headerLevel?((0,r.wg)(),(0,r.iD)("h5",{key:4,id:a.headerId,innerHTML:a.title},null,8,o)):6===a.headerLevel?((0,r.wg)(),(0,r.iD)("h6",{key:5,id:a.headerId,innerHTML:a.title},null,8,c)):(0,r.kq)("",!0)}var u={name:"HeaderTemplate",props:{title:{type:String,required:!0},headerLevel:{type:Number,required:!0},headerId:{type:Number,default:-1}},computed:{headerAssembly(){return""}}},p=a(89);const m=(0,p.Z)(u,[["render",s]]);var v=m}}]);
//# sourceMappingURL=61.fe344612.js.map